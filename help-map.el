(defun help-map (pat)
  (let ((x ))
    (mapatoms
     '(lambda (sym)
	(cond ((string-match pat (symbol-name sym))
	       (let (describe-variable describe-function)
		 (and (documentation-property sym 'variable-documentation)
		      (setq describe-variable t)
		      )
		 (and (fboundp sym) (documentation sym)
		      (setq describe-function t)
		      )
		 (and describe-variable
		      (setq x (cons (list 'describe-variable (list 'quote sym)) x)))
		 (and describe-function
		      (setq x (cons (list 'describe-function (list 'quote sym)) x)))
		 )
	       )
	      )
	)
     )
  (sort x '(lambda (a b) (string-lessp (cadr (cadr a)) (cadr (cadr b)))))
  ))

(defun help-map-show (pat) (interactive "sPattern: ")
  (let* ((x (help-map pat))
	 (buf (make-buffer "*help-map*"))
	 )
    (set-buffer buf)
    (rename-uniquely)
    (show-buf buf (list (%%1 x)))
;    (show x)
    )
  )
