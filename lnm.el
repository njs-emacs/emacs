;; useless and obsolete but demonstrates some process techniques

(load "c.el")
(setq z-process nil)

(defun z ()
  (setq z-process (start-shell "*z*" "lnm /u0/nick/pdu/lisp/main.o"))
  (set-process-sentinel z-process 'z-sentinel)
  (set-process-filter z-process 'z-filter)
  )

(defun z-sentinel (proc msg)
  (set-buffer (process-buffer proc))
  (case (process-status proc)
    ((exit) (kill-buffer (process-buffer proc)))
    )
  )

(defun z-filter (proc string)
  (set-buffer (process-buffer proc))
  (eob)
  (insert string)
  (bob)
  (while (sx (let ((p (parse-partial-sexp (point) (point-max) 0)))
	       (and (zerop (car p)) (nth 2 p))))
    (sx (eval (readc)))
    (kill-sexp 1)
    )
  )

(defun mapreadeval ()
  (let (out)
    (bob)
    (while (sx (let ((p (parse-partial-sexp (point) (point-max) 0)))
		 (and (zerop (car p)) (nth 2 p))))
      (setq out (cons (eval (readc)) out))
      )
    (sit-for 1)
    (nreverse out))
  )
    
(defun z (cmd)
  (let ((buf (shell-buffer cmd  "*z*")))
    (set-buffer buf)
    (mapreadeval)
    )
  )

;(z "lnm /u0/nick/pdu/lisp/dump.o")
;(prin-cdecl-fun-proto dump_writelines)
;void dump_writelines(int ys,int ye,char *pb,int cb,int offset,void *format)
