(defun digit-val (n)
  (cond
   ((eq n ?x) 0)
   ((and (>= n ?0) (<= n ?9)) (- n ?0))
   ((and (>= n ?A) (<= n ?F)) (- n 55))
   ((and (>= n ?a) (<= n ?f)) (- n 87))
   nil))

(defun string-to-hex (s)
  (cond ((numberp s) (setq s (format "%s" s))))
  (if (string-match "0[xX]" s) (setq s (substring s 2)))
  (let ((v 0) (i 0) (d 0) (c (length s)))
    (while (and (< i c) (setq d (digit-val (aref s i))))
      (setq v (+ (ash v 4) d))
      (setq i (+ i 1))
      )
    v))
(fset '0x 'string-to-hex)

(defun hex-l (&rest n)
  (apply 'concat (mapcar '(lambda (i) (format "%02x" i)) n)))

(defun bin-to-string (n &optional size)
  (let* ((size (or size 8))
	 (out (make-string size ?0))
	 (i size))
    (while (> i 0) (-- i) (aset out i (+ ?0 (logand n 1))) (setq n (/ n 2)))
    out))

(defun hex-s (cb)
  (forcat i cb (hex-l i)))

(autoload 'random-rng "random")

(defun hex-r (cb &optional lo hi)
  (let* ((lo (or lo 0))
	 (hi (or hi 256)))
    (apply 'hex-l (forcar i cb (random-rng lo hi)))))

(defun hex-i (cb &optional base)
  (setq base (or base 0))
  (forcat i cb (hex-l (+ i base))))

(defun string-to-hex-string (s)
  (let* ((len (logand (length s) -2))
	 (out (make-string (/ len 2) 0))
	 (i -1)
	 (ii -1))
    (while (< (++ ii) len)
      (aset out (++ i) (+ (ash (digit-val (aref s ii)) 4)
			  (digit-val (aref s (++ ii))))))
    out))

(defun hex-string-to-string (s)
  (let* ((len (length s))
	 (out)
	 (i -1))
    (while (< (++ i) len)
      (setq out (concat out (format "%02x" (aref s i)))))
    out))

(defun rep-hex () (interactive)
  (autoload 'string-to-hex "hex")
  (and (rsf "0[xX]\\([0-9a-fA-F]+\\)" nil t)
       (progn (let ((dec (string-to-hex (match-string 1))))
		(kill-region (match-beginning 0) (match-end 0))
		(insert (prin dec)))
	      t)))

(defmacro hex (x)
  (cond ((not x) 0)
	((numberp x) (string-to-hex (int-to-string x)))
	((symbolp x) (string-to-hex (symbol-name x)))
	((stringp x) (string-to-hex x))
	((eval (list 'hex (eval x))))
	))
(fset '*x 'hex)

(defmacro bin (x) 
  (let* ((x (symbol-name x))
	 (len (length x))
	 (v 0)
	 (mask 1))
    (while (> len 0) (and (eq (aref x (-- len)) ?1) (setq v (+ v mask)))
	   (setq mask (* mask 2)))
    v))

(defun hb (n) (format "%02x" n))
(defun hp (s) (apply 'concat (mapcar 'hb s)))

